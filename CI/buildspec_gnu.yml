version: 0.2

env:
  parameter-store:
    GIT_USER: "/CodeBuild/Git_USER"
    GIT_PASS: "/CodeBuild/Git_PASS"

phases:
  install:
    commands:
      - echo Executing install phase
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - echo $CODEBUILD_WEBHOOK_BASE_REF
      - echo $CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID
      - echo $CODEBUILD_WEBHOOK_EVENT
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION

      - if [ "$CODEBUILD_WEBHOOK_EVENT" = "PULL_REQUEST_MERGED" ];
        then export CODEBUILD_GIT_BRANCH="develop";
        echo "Merging to develop";
        else CODEBUILD_GIT_BRANCH="$(git branch -a --contains $CODEBUILD_RESOLVED_SOURCE_VERSION | sed -n 2p | awk '{ printf $1 }')";
        export CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH#remotes/origin/};
        fi

      - echo "CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH}"
      - echo "CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}"

      - echo MPI setup for Docker
      - mkdir -p /var/run/sshd
      - ssh-keygen -A
      - sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config
      - sed -i 's/#RSAAuthentication yes/RSAAuthentication yes/g' /etc/ssh/sshd_config
      - sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config

      - groupadd jcsda -g 9999
      - useradd jcsdauser
      - mkdir -p /jcsda /build_container
      - chown -R jcsdauser:jcsda /build_container  /usr/local
      - chmod 6755 /jcsda /build_container /usr/local

      - mkdir /jcsda/.ssh ; echo "StrictHostKeyChecking no" > /jcsda/.ssh/config
      - mkdir -p /jcsda/.openmpi
      - mkdir -p /home/jcsdauser/.openmpi

      - cp CI/default-mca-params.conf /home/jcsdauser/.openmpi/mca-params.conf
      - cat /home/jcsdauser/.openmpi/mca-params.conf
      - chown -R jcsdauser:jcsda /jcsda/

      - su - jcsdauser -c "ssh-keygen -f /jcsda/.ssh/id_rsa -t rsa -N ''
        && chmod 600 /jcsda/.ssh/config
        && chmod 700 /jcsda/.ssh
        && cp /jcsda/.ssh/id_rsa.pub /jcsda/.ssh/authorized_keys
        && echo MPI setup for Docker done"
      - su - jcsdauser -c "echo $CC
        && echo $CXX
        && echo $FC
        && whereis mpicc"

  pre_build:
    commands:
      - echo Executing pre_build phase
      - git lfs install # creates .gitconfig
      - cp ~/.gitconfig /home/jcsdauser/

      - cd CI

      - if [ "$CODEBUILD_GIT_BRANCH" = "develop" ];
        then export CODEBUILD_GIT_BRANCH_FORK="release-stable";
        else export CODEBUILD_GIT_BRANCH_FORK=${CODEBUILD_GIT_BRANCH};
        echo "CODEBUILD_GIT_BRANCH_FORK=${CODEBUILD_GIT_BRANCH_FORK}";
        fi

      # fv3-bundle
      - ./clone.sh $GIT_USER $GIT_PASS fv3-bundle $CODEBUILD_GIT_BRANCH fv3-bundle /jcsda develop

      # FV3-JEDI (testing repo)
      - ./clone.sh $GIT_USER $GIT_PASS fv3-jedi $CODEBUILD_GIT_BRANCH fv3-jedi /jcsda/fv3-bundle develop

      # fv3-jedi-lm
      - ./clone.sh $GIT_USER $GIT_PASS fv3-jedi-linearmodel $CODEBUILD_GIT_BRANCH fv3-jedi-lm /jcsda/fv3-bundle develop

      # crtm
      - ./clone.sh $GIT_USER $GIT_PASS crtm $CODEBUILD_GIT_BRANCH crtm /jcsda/fv3-bundle develop

      # ioda
      - ./clone.sh $GIT_USER $GIT_PASS ioda $CODEBUILD_GIT_BRANCH ioda /jcsda/fv3-bundle develop

      # disable git-lfs
      - git lfs install --skip-smudge

      # saber
      - ./clone.sh $GIT_USER $GIT_PASS saber $CODEBUILD_GIT_BRANCH saber /jcsda/fv3-bundle develop

      # oops
      - ./clone.sh $GIT_USER $GIT_PASS oops $CODEBUILD_GIT_BRANCH oops /jcsda/fv3-bundle develop

      # ufo
      - ./clone.sh $GIT_USER $GIT_PASS ufo $CODEBUILD_GIT_BRANCH ufo /jcsda/fv3-bundle develop

      # femps
      - ./clone.sh $GIT_USER $GIT_PASS femps $CODEBUILD_GIT_BRANCH femps /jcsda/fv3-bundle develop

      # fms
      - ./clone.sh $GIT_USER $GIT_PASS FMS $CODEBUILD_GIT_BRANCH fms /jcsda/fv3-bundle release-stable

      # GFDL_atmos_cubed_sphere
      - ./clone.sh $GIT_USER $GIT_PASS GFDL_atmos_cubed_sphere $CODEBUILD_GIT_BRANCH GFDL_atmos_cubed_sphere /jcsda/fv3-bundle release-stable

      # fckit
      - ./clone.sh $GIT_USER $GIT_PASS fckit $CODEBUILD_GIT_BRANCH_FORK fckit /jcsda/fv3-bundle release-stable

      # atlas
      - ./clone.sh $GIT_USER $GIT_PASS atlas $CODEBUILD_GIT_BRANCH_FORK atlas /jcsda/fv3-bundle release-stable

      # geos-aero
      - ./clone.sh $GIT_USER $GIT_PASS geos-aero $CODEBUILD_GIT_BRANCH geos-aero /jcsda/fv3-bundle develop

      - cd /jcsda/fv3-bundle
      - sed -i 's/BRANCH develop UPDATE//' CMakeLists.txt
      - sed -i 's/BRANCH dev\/master-ecbuild UPDATE//' CMakeLists.txt
      - sed -i 's/BRANCH release-stable UPDATE//' CMakeLists.txt
      - sed -i '/PROJECT eckit/d' CMakeLists.txt
#      - sed -i -e '/ecbuild_bundle( PROJECT crtm/i\
#        ecbuild_bundle( PROJECT geos-aero GIT "https://github.com/JCSDA/geos-aero.git" )' CMakeLists.txt
      - cat CMakeLists.txt

  build:
    commands:
      - echo Executing build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - su - jcsdauser -c "cd /build_container
        && echo $CC
        && echo $CXX
        && echo $FC
        && CC=mpicc CXX=mpicxx FC=mpifort
        && ecbuild /jcsda/fv3-bundle/ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DTEST_TIME_REF_FV3=CTestCostData.txt.awsgnu.test
        && cd fv3-jedi
        && make -j8"

      - export BUILD_STATUS="0"
      - echo $BUILD_STATUS
      - echo $CODEBUILD_BUILD_SUCCEEDING

      - if [ "$CODEBUILD_BUILD_SUCCEEDING" = "1" ];
        then export BUILD_STATUS="1";
        echo "Build passed";
        fi
      - echo $BUILD_STATUS

      - su - jcsdauser -c "CC=mpicc CXX=mpicxx FC=mpifort
        && cd /build_container/fv3-jedi
        && ctest -E test_fv3_time"

      - cat /build_container/fv3-jedi/Testing/Temporary/CTestCostData.txt

#  disable for now
#    commands:
#      - if [ "$BUILD_STATUS" = "1" ] && [ "$CODEBUILD_BUILD_SUCCEEDING" = "1" ];
#        then echo "All tests passed; Run time test";
#        su - jcsdauser -c "cd /build_container/fv3-jedi
#        && ls
#        && export FC=mpifort
#        && export CC=mpicc
#        && export CXX=mpicxx
#        && ctest -VV -R test_fv3_time";
#        fi

  post_build:
    commands:
      - echo Executing post_build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - if [ "$BUILD_STATUS" = "1" ] && [ "$CODEBUILD_BUILD_SUCCEEDING" = "0" ];
        then echo "Build passed, rerun failed tests";
        su - jcsdauser -c "cd /build_container/fv3-jedi
        && ctest -VV --rerun-failed";
        else echo "Build failed";
        fi
artifacts:
  files:
    - /build_container/fv3-jedi/Testing/Temporary/CTestCostData.txt
  name: CTestCost-gnu-$(date +%Y-%m-%d-%k_%M)

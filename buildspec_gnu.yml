version: 0.2

env:
  parameter-store:
    GIT_USER: "/CodeBuild/Git_USER"
    GIT_PASS: "/CodeBuild/Git_PASS"

phases:
  install:
    commands:
      - echo Executing install phase
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - echo $CODEBUILD_WEBHOOK_BASE_REF
      - echo $CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID
      - echo $CODEBUILD_WEBHOOK_EVENT
      - echo $CODEBUILD_BUILD_SUCCEEDING

      - if [ "$CODEBUILD_WEBHOOK_EVENT" = "PULL_REQUEST_MERGED" ];
        then export CODEBUILD_GIT_BRANCH="develop";
        echo $CODEBUILD_GIT_BRANCH;
        echo "Merging to develop";
        else CODEBUILD_GIT_BRANCH="$(git branch -a --contains $CODEBUILD_SOURCE_VERSION | sed -n 2p | awk '{ printf $1 }')";
        export CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH#remotes/origin/};
        fi

      - echo "CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH}"
      - echo "CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}"

      - echo MPI setup for Docker
      - mkdir -p /var/run/sshd
      - ssh-keygen -A
      - sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config
      - sed -i 's/#RSAAuthentication yes/RSAAuthentication yes/g' /etc/ssh/sshd_config
      - sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config

      - groupadd jcsda -g 9999
      - useradd jcsdauser
      - mkdir -p /jcsda /build_container
      - chown -R jcsdauser:jcsda /build_container  /usr/local
      - chmod 6755 /jcsda /build_container /usr/local

      - mkdir /jcsda/.ssh ; echo "StrictHostKeyChecking no" > /jcsda/.ssh/config
      - mkdir -p /jcsda/.openmpi
      - mkdir -p /home/jcsdauser/.openmpi

      - cp default-mca-params.conf /home/jcsdauser/.openmpi/mca-params.conf
      - cat /home/jcsdauser/.openmpi/mca-params.conf
      - chown -R jcsdauser:jcsda /jcsda/

      - su - jcsdauser -c "ssh-keygen -f /jcsda/.ssh/id_rsa -t rsa -N ''
        && chmod 600 /jcsda/.ssh/config
        && chmod 700 /jcsda/.ssh
        && cp /jcsda/.ssh/id_rsa.pub /jcsda/.ssh/authorized_keys
        && echo MPI setup for Docker done"
      - su - jcsdauser -c "echo $CC
        && echo $CXX
        && echo $FC
        && whereis mpicc"

  pre_build:
    commands:
      - echo Executing pre_build phase
      - git lfs install # creates .gitconfig
      - cp ~/.gitconfig /home/jcsdauser/

      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/fv3-bundle fv3-bundle
      - cd fv3-bundle
      - git checkout $CODEBUILD_GIT_BRANCH || echo "No branch named $CODEBUILD_GIT_BRANCH in fv3-bundle repo"
      - cd $CODEBUILD_SRC_DIR

      # FV3-JEDI and the linearized model
      - git clone -b $CODEBUILD_GIT_BRANCH https://$GIT_USER:$GIT_PASS@github.com/jcsda/fv3-jedi fv3-bundle/fv3-jedi

      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/fv3-jedi-linearmodel fv3-bundle/fv3-jedi-lm
      - cd fv3-bundle/fv3-jedi-lm
      - git checkout $CODEBUILD_GIT_BRANCH || echo "No branch named $CODEBUILD_GIT_BRANCH in fv3-jedi-lm repo"
      - cd $CODEBUILD_SRC_DIR


      # External observation operators
      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/crtm fv3-bundle/crtm
      - cd fv3-bundle/crtm
      - git checkout $CODEBUILD_GIT_BRANCH || echo "No branch named $CODEBUILD_GIT_BRANCH in crtm repo"
      - cd $CODEBUILD_SRC_DIR

      # Core JEDI repositories
      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/saber fv3-bundle/saber
      - cd fv3-bundle/saber
      - git checkout $CODEBUILD_GIT_BRANCH || echo "No branch named $CODEBUILD_GIT_BRANCH in saber repo"
      - cd $CODEBUILD_SRC_DIR

      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/oops fv3-bundle/oops
      - cd fv3-bundle/oops
      - git checkout $CODEBUILD_GIT_BRANCH || echo "No branch named $CODEBUILD_GIT_BRANCH in oops repo"
      - cd $CODEBUILD_SRC_DIR

      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/ioda fv3-bundle/ioda
      - cd fv3-bundle/ioda
      - git checkout $CODEBUILD_GIT_BRANCH || echo "No branch named $CODEBUILD_GIT_BRANCH in ioda repo"
      - cd $CODEBUILD_SRC_DIR

      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/ufo fv3-bundle/ufo
      - cd fv3-bundle/ufo
      - git checkout $CODEBUILD_GIT_BRANCH || echo "No branch named $CODEBUILD_GIT_BRANCH in ufo repo"
      - cd $CODEBUILD_SRC_DIR

      # femps
      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/femps fv3-bundle/femps
      - cd fv3-bundle/femps
      - git checkout $CODEBUILD_GIT_BRANCH || echo "No branch named $CODEBUILD_GIT_BRANCH in femps repo"
      - cd $CODEBUILD_SRC_DIR

      # FV3 based model and/or FMS
      - git clone -b dev/master-ecbuild https://$GIT_USER:$GIT_PASS@github.com/jcsda/FMS fv3-bundle/fms
      - cd $CODEBUILD_SRC_DIR

      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/fckit fv3-bundle/fckit
      - cd fv3-bundle/fckit
      - git checkout $CODEBUILD_GIT_BRANCH || echo "No branch named $CODEBUILD_GIT_BRANCH in fckit repo"
      - cd $CODEBUILD_SRC_DIR


      - ls
      - pwd
      - mv fv3-bundle /jcsda/
      - cd /jcsda/fv3-bundle
      - pwd
      - ls
      - sed -i 's/BRANCH dev\/master-ecbuild UPDATE  //' CMakeLists.txt
      - sed -i 's/BRANCH develop UPDATE //' CMakeLists.txt
      - sed -i '/PROJECT eckit/d' CMakeLists.txt

  build:
    commands:
      - echo Executing build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - su - jcsdauser -c "cd /build_container
        && echo $CC
        && echo $CXX
        && echo $FC
        && CC=mpicc CXX=mpicxx FC=mpifort ecbuild /jcsda/fv3-bundle/
        && cd fv3-jedi
        && make -j4
        && ctest"
  post_build:
    commands:
      - echo Executing post_build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - if [ "$CODEBUILD_BUILD_SUCCEEDING" = "0" ];
        then echo "Build Failing";
        su - jcsdauser -c "cd /build_container/fv3-jedi
        && ctest -VV --rerun-failed";
        else echo "CODEBUILD_BUILD_SUCCEEDING=$CODEBUILD_BUILD_SUCCEEDING";
        fi

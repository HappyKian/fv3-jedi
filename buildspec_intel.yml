version: 0.2

env:
  parameter-store:
    GIT_USER: "/CodeBuild/Git_USER"
    GIT_PASS: "/CodeBuild/Git_PASS"

phases:
  install:
    commands:
      - echo Executing install phase
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - echo $CODEBUILD_WEBHOOK_BASE_REF


      - echo MPI setup for Docker
      - mkdir -p /var/run/sshd
      - ssh-keygen -A
      - sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config
      - sed -i 's/#RSAAuthentication yes/RSAAuthentication yes/g' /etc/ssh/sshd_config
      - sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config

      - groupadd jcsda -g 9999
      - useradd jcsdauser
      - mkdir -p /jcsda /build_container
      - chown -R jcsdauser:jcsda /build_container  /usr/local
      - chmod 6755 /jcsda /build_container /usr/local

      - mkdir /jcsda/.ssh ; echo "StrictHostKeyChecking no" > /jcsda/.ssh/config
      - mkdir -p /jcsda/.openmpi
      - mkdir -p /home/jcsdauser/.openmpi

      - cp default-mca-params.conf /home/jcsdauser/.openmpi/mca-params.conf
      - cat /home/jcsdauser/.openmpi/mca-params.conf
      - chown -R jcsdauser:jcsda /jcsda/

      - su - jcsdauser -c "ssh-keygen -f /jcsda/.ssh/id_rsa -t rsa -N ''
        && chmod 600 /jcsda/.ssh/config
        && chmod 700 /jcsda/.ssh
        && cp /jcsda/.ssh/id_rsa.pub /jcsda/.ssh/authorized_keys
        && echo MPI setup for Docker done"
      - su - jcsdauser -c "echo $CC
        && echo $CXX
        && echo $FC
        && whereis mpicc"

      ## cannot source /etc/bash.bashrc so copy what's there for root 
      - sed '12s/INTEL_TARGET_ARCH=/INTEL_TARGET_ARCH=intel64/' /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
      - export COMPILERVARS_ARCHITECTURE=intel64
      - export COMPILERVARS_PLATFORM=linux
      - . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
      - export FC=mpiifort
      - export CC=mpiicc
      - export CXX=mpiicpc
      - export PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - export LD_LIBRARY_PATH=/usr/local/lib
      - export LIBRARY_PATH=/usr/local/lib
      - . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh

  pre_build:
    commands:
      - echo Executing pre_build phase
      - my_branch=$(echo $CODEBUILD_WEBHOOK_TRIGGER| cut -d"/" -f2-)
      - echo $my_branch
      - git lfs install # creates .gitconfig
      - cp ~/.gitconfig /home/jcsdauser/
      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/fv3-bundle fv3-bundle

      # External observation operators
      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/crtm fv3-bundle/crtm

      # Core JEDI repositories
      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/saber fv3-bundle/saber
      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/oops fv3-bundle/oops
      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/ioda fv3-bundle/ioda
      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/ufo fv3-bundle/ufo

      # FV3 based model and/or FMS
      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/FMS fv3-bundle/fms

      # FV3-JEDI and the linearized model
      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/fv3-jedi-linearmodel fv3-bundle/fv3-jedi-lm
      - git clone -b $my_branch https://$GIT_USER:$GIT_PASS@github.com/jcsda/fv3-jedi fv3-bundle/fv3-jedi

      - git clone https://$GIT_USER:$GIT_PASS@github.com/jcsda/fckit fv3-bundle/fckit

      - ls
      - pwd
      - mv fv3-bundle /jcsda/
      - cd /jcsda/fv3-bundle
      - pwd
      - ls
      - sed -i 's/BRANCH develop             UPDATE //' CMakeLists.txt
      - sed -i '/PROJECT eckit/d' CMakeLists.txt

  build:
    commands:
      - echo Executing build phase
      ## cannot source /etc/bash.bashrc so copy what's there for jscdauser
      - su - jcsdauser -c "export COMPILERVARS_ARCHITECTURE=intel64
        && export COMPILERVARS_PLATFORM=linux
        && . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
        && export FC=mpiifort
        && export CC=mpiicc
        && export CXX=mpiicpc
        && export PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        && export LD_LIBRARY_PATH=/usr/local/lib
        && export LIBRARY_PATH=/usr/local/lib
        && . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
        && cd /build_container 
        && ls
        && ecbuild /jcsda/fv3-bundle/
        && cd fv3-jedi
        && make -j4
        && ctest"
  post_build:
    commands:
      - echo Executing post_build phase

      - su - jcsdauser -c "export COMPILERVARS_ARCHITECTURE=intel64
        && export COMPILERVARS_PLATFORM=linux
        && . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
        && export FC=mpiifort
        && export CC=mpiicc
        && export CXX=mpiicpc
        && export PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        && export LD_LIBRARY_PATH=/usr/local/lib
        && export LIBRARY_PATH=/usr/local/lib
        && . /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh
        && cd /build_container/fv3-jedi/
        && ctest -VV --rerun-failed"
